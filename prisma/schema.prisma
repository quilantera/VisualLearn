generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
    id String @id @default(uuid())
    email String @unique
    password String 
    name String 
    avatarUrl String?  
    role   String  @default("ALUNO")  
    createdAt DateTime @default(now())
    schoolId String    
    schools School @relation(fields: [schoolId], references: [id])
    classAlunos ClassAluno[]
    activityAluno ActivityAlunos[]
    subjects Subject[]
}


model School{
    id String @id @default(uuid())
    name String 
    cnpj String @unique
    logoUrl String?
    createdAt DateTime @default(now())
    classes Class[]
    users User[]
}
model Class {
    id String @id @default(uuid())
    name String
    schoolYear DateTime @default(now())
    schoolId String 
    school School @relation(fields: [schoolId], references: [id])
    subjects Subject[]
    classAlunos ClassAluno[]

}
model Subject {
    id String @id @default(uuid())
    name String 
    classId String
    teacherId String
    classes Class @relation(fields: [classId], references: [id])
    teacher User @relation(fields:[teacherId], references: [id])
    activities Activity[]
}
model ClassAluno {
    id Int @id @default(autoincrement())
    schoolYear DateTime @default(now())
    alunoId String
    classId String
    alunos User @relation(fields: [alunoId], references: [id])
    classes Class @relation(fields: [classId], references: [id])
}
model Activity {
    id String @id @default(uuid())
    name String
    deadline DateTime @default(now())
    activityMongodbUrl String
    subjectId String
    activityAluno ActivityAlunos[]
    subjects Subject @relation(fields: [subjectId], references: [id])
   
}
model ActivityAlunos {
    id Int @id @default(autoincrement())
    alunoId String
    activityId String
    deliveryDate DateTime?
    note Int?
    alunos User @relation(fields: [alunoId], references: [id])
    activities Activity @relation(fields: [activityId], references: [id])
}